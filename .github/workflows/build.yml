name: Build kpm patch binaries

on:
  workflow_dispatch:
  workflow_call:
    

jobs:
  build-patch:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0 # fetch full history

      - name: Build patch elf binaries ...
        run: |
          set -e
          sudo apt install -y xxd aria2
          #grep -Rai --exclude-dir=.github . -e 'sukisu' 2>/dev/null
          mkdir -p clang-22
          aria2c -x 16 -s 16 -o clang-22.tar.gz "https://github.com/ZyCromerZ/Clang/releases/download/22.0.0git-20250904-release/Clang-22.0.0git-20250904.tar.gz"
          tar -xzf clang-22.tar.gz -C clang-22
          rm -rf clang-22.tar.gz
          export PATH=${GITHUB_WORKSPACE}/clang-22/bin:${GITHUB_WORKSPACE}/clang-22/x86_64-pc-linux-gnu/bin:$PATH
          HOME=${GITHUB_WORKSPACE}
          mkdir -p ${HOME}/release
          RELEASE=${HOME}/release
          TOOLS=${HOME}/tools
          PATCH=${HOME}/patch
          mkdir -p ${PATCH}/res
          KERNEL=${HOME}/kernel
          #export TARGET_COMPILE=${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin
          export TARGET_COMPILE=${GITHUB_WORKSPACE}/clang-22/x86_64-pc-linux-gnu/bin
          #mkdir -p $PATCH/res
          #$ANDROID_NDK_HOME/ndk-build
          cd $TOOLS
          mkdir -p build/android
          cd build/android
          #ls -lR ${ANDROID_NDK_LATEST_HOME}/
          #cmake -DCMAKE_TOOLCHAIN_FILE="${ANDROID_NDK_LATEST_HOME}/build/cmake/android.toolchain.cmake" -DCMAKE_BUILD_TYPE=Release -DANDROID_PLATFORM=android-33 -DANDROID_ABI=arm64-v8a ../..
          cmake -DCMAKE_TOOLCHAIN_FILE="${HOME}/clang-22/lib/cmake/clang/ClangTargets.cmake" -DCMAKE_BUILD_TYPE=Release -DANDROID_PLATFORM=android-33 -DANDROID_ABI=arm64-v8a ../..
          cmake --build .
          mv kptools kptools-android
          # 构建 Linux 版本
          cd $TOOLS
          cd build
          cmake ..
          make
          mv kptools kptools-linux
          cd $KERNEL
          make clean
          make
          cd $HOME
          #export ANDROID_NDK=${ANDROID_NDK_LATEST_HOME}
          export ANDROID_NDK=${HOME}/clang-22
          cp -r $TOOLS/build/android/kptools-android $PATCH/res
          cp -r $TOOLS/build/kptools-linux $PATCH/res
          cp -r $KERNEL/kpimg $PATCH/res
          cd $PATCH
          
          chmod  +x ./encrypt
          ./encrypt $KERNEL/kpimg $PATCH/res/kpimg.enc
          #sed -i 's/sukisu/linuxpu/g' res/decrypt.enc
          #./encrypt res/decrypt.enc res/kpimg.enc;rm -f res/decrypt.enc
          xxd -i res/kpimg.enc > include/kpimg_enc.h
          xxd -i res/kptools-linux > include/kptools_linux.h
          xxd -i res/kptools-android > include/kptools_android.h
          
          # 创建构建目录
          rm -rf build-android
          mkdir -p build-android
          cd build-android
          # 生成编译配置
          #cmake .. -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK_LATEST_HOME}/build/cmake/android.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-33 -DANDROID_STL=c++_static
          cmake .. -DCMAKE_TOOLCHAIN_FILE=${HOME}/clang-22/lib/cmake/clang/ClangTargets.cmake -DCMAKE_BUILD_TYPE=Release -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-33 -DANDROID_STL=c++_static
          cmake --build .
          cp -r patch_android $RELEASE
          cd $PATCH
          rm -rf build-linux || true
          mkdir -p build-linux
          cd build-linux
          cmake .. && make
          grep -Ria --exclude-dir={.git*} ${HOME} -e 'sukisu'
          mv patch patch_linux
          cp -r patch_linux $RELEASE
          #export TARGET_COMPILE="$(dirname $(which gcc))/"
          cd ${HOME}/kpms
          #curl -o arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-elf.tar.xz https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu/12.2.rel1/binrel/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-elf.tar.xz
          #tar -Jxf arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-elf.tar.xz
          #export TARGET_COMPILE=`pwd`/arm-gnu-toolchain-12.2.rel1-x86_64-aarch64-none-elf/bin/aarch64-none-elf-
          export TARGET_COMPILE=${HOME}/clang-22/bin/aarch64-linux-gnu-
          cd demo-hello
          make
          mv hello.kpm $RELEASE/demo-hello.kpm
          cd ../demo-inlinehook
          make
          mv inlinehook.kpm $RELEASE/demo-inlinehook.kpm
          cd ../demo-syscallhook
          make
          mv syscallhook.kpm $RELEASE/demo-syscallhook.kpm
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4.6.2
        with: 
          name: patch_linux_android
          path: release/*
